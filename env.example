# =============================================================================
# üèóÔ∏è SYMFONY HEXAGONAL SKELETON - ENVIRONMENT CONFIGURATION
# =============================================================================
# Copiez ce fichier vers .env.local et configurez les valeurs selon votre environnement
# 
# Documentation compl√®te : https://symfony.com/doc/current/configuration.html
# =============================================================================

# =============================================================================
# üöÄ APPLICATION CONFIGURATION
# =============================================================================

# Cl√© secr√®te de l'application (g√©n√©r√©e automatiquement par Symfony)
# Utilis√©e pour signer les tokens CSRF, les cookies, etc.
APP_SECRET=your_app_secret_key_here_32_characters_minimum

# Environnement d'ex√©cution (dev, test, prod)
APP_ENV=dev

# Mode debug (true en dev, false en prod)
APP_DEBUG=true

# =============================================================================
# üóÑÔ∏è DATABASE CONFIGURATION
# =============================================================================

# URL de connexion √† la base de donn√©es
# Format: driver://username:password@host:port/database_name?serverVersion=version

# Pour MySQL (docker-compose.yml)
DATABASE_URL="mysql://symfony:password@localhost:3306/symfony_hexagonal?serverVersion=8.0"

# Pour PostgreSQL (compose.yaml)
# DATABASE_URL="postgresql://app:!ChangeMe!@localhost:5432/app?serverVersion=16&charset=utf8"

# =============================================================================
# üîê JWT AUTHENTICATION CONFIGURATION
# =============================================================================

# Cl√©s JWT (g√©n√©r√©es avec les commandes dans le README)
JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
JWT_PASSPHRASE=your_jwt_passphrase_here

# =============================================================================
# üåê CORS CONFIGURATION
# =============================================================================

# Origines autoris√©es pour les requ√™tes CORS (regex)
# Exemples :
# - Pour localhost : ^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$
# - Pour un domaine sp√©cifique : ^https?://(www\.)?example\.com$
# - Pour tous les domaines (D√âCONSEILL√â en production) : ^.*$
CORS_ALLOW_ORIGIN=^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$

# =============================================================================
# üìß MAILER CONFIGURATION
# =============================================================================

# DSN du service de mail
# Exemples :
# - Pour Gmail : gmail://username:password@default
# - Pour SendGrid : sendgrid://key@default
# - Pour SMTP : smtp://user:pass@smtp.example.com:587
# - Pour test (null) : null://null
MAILER_DSN=null://null

# =============================================================================
# üì® MESSENGER CONFIGURATION (QUEUE SYSTEM)
# =============================================================================

# DSN pour le syst√®me de messagerie asynchrone
# Exemples :
# - Redis : redis://localhost:6379/messages
# - RabbitMQ : amqp://guest:guest@localhost:5672/%2f/messages
# - Doctrine : doctrine://default
# - Synchronous (pour dev) : sync://
MESSENGER_TRANSPORT_DSN=sync://

# =============================================================================
# üåç API CONFIGURATION
# =============================================================================

# URL de base de l'API (utilis√©e pour la documentation Swagger)
API_BASE_URL=http://localhost:8000

# =============================================================================
# üêõ DEBUG CONFIGURATION
# =============================================================================

# Serveur de dump pour le debug (optionnel)
# Format : tcp://host:port
VAR_DUMPER_SERVER=127.0.0.1:9912

# =============================================================================
# üß™ TEST CONFIGURATION
# =============================================================================

# Token pour les tests (utilis√© par ParaTest)
# G√©n√©r√© automatiquement, ne pas modifier
TEST_TOKEN=

# =============================================================================
# üê≥ DOCKER CONFIGURATION (pour compose.yaml)
# =============================================================================

# Version de PostgreSQL
POSTGRES_VERSION=16

# Configuration PostgreSQL
POSTGRES_DB=app
POSTGRES_USER=app
POSTGRES_PASSWORD=!ChangeMe!

# =============================================================================
# üîß OPTIONAL CONFIGURATIONS
# =============================================================================

# Cache Redis (optionnel)
# REDIS_URL=redis://localhost:6379

# Elasticsearch (optionnel)
# ELASTICSEARCH_URL=http://localhost:9200

# Sentry DSN pour le monitoring d'erreurs (optionnel)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# =============================================================================
# üìù NOTES IMPORTANTES
# =============================================================================

# 1. G√©n√©rez les cl√©s JWT avec ces commandes :
#    mkdir -p config/jwt
#    openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096
#    openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout

# 2. Pour la production, changez APP_ENV=prod et APP_DEBUG=false

# 3. Utilisez des mots de passe forts en production

# 4. Ne commitez JAMAIS le fichier .env.local dans Git

# 5. Pour Docker, les services sont accessibles via :
#    - Application : http://localhost:8000
#    - Base de donn√©es : localhost:3306 (MySQL) ou localhost:5432 (PostgreSQL)
#    - Redis : localhost:6379
